{"version":3,"sources":["pages/home.js","pages/login.js","pages/signup.js","App.js","serviceWorker.js","index.js"],"names":["Home","useStyles","makeStyles","form","textAlign","loginButton","marginTop","Login","classes","Container","style","Grid","container","spacing","className","item","sm","Typography","variant","TextField","label","name","type","fullWidth","Button","color","to","SignUp","theme","createMuiTheme","palette","primary","main","App","exact","path","component","home","login","signup","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3da10d04.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Home() {\n    return (\n        <div>\n            Home\n        </div>)\n}\n\nexport default Home","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n// MUI Stuff\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles({\n    form: {\n        textAlign: \"center\"\n    },\n    loginButton: {\n        marginTop: 20\n    }\n});\n\n\nfunction Login() {\n\n    const classes = useStyles();\n\n    return (\n        <Container>\n            <div style={{marginTop:50}}>\n            <Grid container spacing={1} className={classes.form}>\n                <Grid item sm />\n\n                <Grid item sm>\n                    <Typography variant=\"h4\">Login</Typography>\n                    <TextField label=\"Email\" name=\"email\" type=\"email\" fullWidth />\n                    <TextField label=\"Password\" name=\"password\" type=\"password\" fullWidth />\n                    <Button variant=\"contained\" color=\"primary\" className={classes.loginButton}>Login</Button>\n                    <div style={{ marginTop: 10 }}>\n                        dont have an account ? sign up <Link to=\"/signup\">here</Link>\n                    </div>\n\n                </Grid>\n\n                <Grid item sm />\n\n            </Grid>\n            </div>\n        </Container>\n    );\n}\n\n\nexport default Login","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n// MUI Stuff\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles({\n    form: {\n        textAlign: \"center\"\n    },\n    loginButton: {\n        marginTop: 20\n    }\n});\n\n\nfunction SignUp() {\n\n    const classes = useStyles();\n\n    return (\n        <Container>\n            <div style={{marginTop:50}}>\n            <Grid container spacing={1} className={classes.form}>\n                <Grid item sm />\n\n                <Grid item sm>\n                    <Typography variant=\"h4\">SignUp</Typography>\n                    <TextField label=\"Name\" name=\"name\" type=\"text\" fullWidth />\n                    <TextField label=\"Email\" name=\"email\" type=\"email\" fullWidth />\n                    <TextField label=\"Password\" name=\"password\" type=\"password\" fullWidth />\n                    <TextField label=\"Confirm Password\" name=\"confirmPassword\" type=\"password\" fullWidth />\n                    <Button variant=\"contained\" color=\"primary\" className={classes.loginButton}>SignUp</Button>\n                    <br />\n\n                    <div style={{ marginTop: 10, textAlign: 'center' }}>\n                        Already have an account ? Login <Link to=\"/login\">here</Link>\n                    </div>\n\n                </Grid>\n\n                <Grid item sm />\n\n            </Grid>\n            </div>\n        </Container>\n    );\n}\n\n\nexport default SignUp","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n// MUI \nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\n// components\nimport home from './pages/home'\nimport login from './pages/login'\nimport signup from './pages/signup'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#1976d2'\n    }\n  },\n});\n\n\nfunction App() {\n  return (\n    <MuiThemeProvider theme={theme}>\n    <Router>\n      <Switch>\n      <Route exact path=\"/\" component={home} />\n      <Route exact path=\"/login\" component={login} />\n      <Route exact path=\"/signup\" component={signup} />\n      </Switch>\n\n    </Router>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}